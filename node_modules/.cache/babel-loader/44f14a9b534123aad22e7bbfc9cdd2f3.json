{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\maskdetector\\\\src\\\\pages\\\\detect\\\\Detect.js\";\nimport React, { Component } from 'react';\nimport Header from '../../comps/header/Header';\nimport Footer from '../../comps/footer/Footer';\nimport Helmet from 'react-helmet';\nimport conf from '../../config.json';\nimport './detect.css';\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport m1 from '../../images/mask/1.jpg';\nimport m2 from '../../images/mask/2.jpg';\nimport m3 from '../../images/mask/3.jpg';\nimport m4 from '../../images/mask/4.jpg';\nimport m5 from '../../images/mask/5.jpg';\nimport nm1 from '../../images/no_mask/1.jpg';\nimport nm2 from '../../images/no_mask/2.jpg';\nimport nm3 from '../../images/no_mask/3.jpg';\nimport nm4 from '../../images/no_mask/4.jpg';\nimport nm5 from '../../images/no_mask/5.jpg';\nimport nm6 from '../../images/no_mask/6.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Detect extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = async () => {\n      const maskImageCount = 5;\n      const noMaskImageCount = 6; // https://projects.techfacts007.in/hack/images/mask/ {5}\n      // https://projects.techfacts007.in/hack/images/no_mask/ {6}\n      // const trainImagesContainer = document.querySelector('.train-images');\n      // // Add mask images to the DOM and give them a class of `mask-img`\n      // for (let i = 1; i <= maskImageCount; i++) {\n      //     const newImage = document.createElement('IMG');\n      //     newImage.setAttribute('crossorigin', `anonymous`);\n      //     newImage.setAttribute('src', `https://projects.techfacts007.in/hack/images/mask/${i}.jpg`);\n      //     newImage.classList.add('mask-img');\n      //     trainImagesContainer.appendChild(newImage);\n      // }\n      // // Add no mask images to the DOM and give them a class of `no-mask-img`\n      // for (let i = 1; i <= noMaskImageCount; i++) {\n      //     const newImage = document.createElement('IMG');\n      //     newImage.setAttribute('crossorigin', `anonymous`);\n      //     newImage.setAttribute('src', `https://projects.techfacts007.in/hack/images//no_mask/${i}.jpg`);\n      //     newImage.classList.add('no-mask-img');\n      //     trainImagesContainer.appendChild(newImage);\n      // }\n      // console.log( trainImagesContainer )\n\n      return true; // Load mobilenet module\n\n      const mobilenetModule = await mobilenet.load({\n        version: 2,\n        alpha: 1\n      }); // Add examples to the KNN Classifier\n\n      const classifier = await this.trainClassifier(mobilenetModule); // Predict class for the test image\n\n      const testImage = document.getElementById('test-img');\n      const tfTestImage = tf.browser.fromPixels(testImage);\n      const logits = mobilenetModule.infer(tfTestImage, 'conv_preds');\n      const prediction = await classifier.predictClass(logits); // Add a border to the test image to display the prediction result\n\n      if (prediction.label == 1) {\n        // no mask - red border\n        testImage.classList.add('no-mask');\n      } else {\n        // has mask - green border\n        testImage.classList.add('mask');\n      }\n    };\n\n    this.state = {\n      isCameraAccessed: true\n    };\n\n    this.trainClassifier = async mobilenetModule => {\n      // Create a new KNN Classifier\n      const classifier = knnClassifier.create(); // Train using mask images\n\n      const maskImages = document.querySelectorAll('.mask-img');\n      maskImages.forEach(img => {\n        const tfImg = tf.browser.fromPixels(img);\n        const logits = mobilenetModule.infer(tfImg, 'conv_preds');\n        classifier.addExample(logits, 0); // has mask\n      }); // Train using no mask images\n\n      const noMaskImages = document.querySelectorAll('.no-mask-img');\n      noMaskImages.forEach(img => {\n        const tfImg = tf.browser.fromPixels(img);\n        const logits = mobilenetModule.infer(tfImg, 'conv_preds');\n        classifier.addExample(logits, 1); // no mask\n      });\n      return classifier;\n    };\n\n    this.fillImage = () => {\n      let image = document.getElementById('test');\n      let canvas = document.getElementById('canvas');\n      let ctx = canvas.getContext('2d');\n      image.src = canvas.toDataURL(\"image/png\");\n    };\n\n    this.captureVideo = () => {\n      var canvas = document.getElementById('canvas');\n      var video = document.getElementById('user-video');\n      console.log(canvas.width, canvas.height);\n      canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n      this.fillImage();\n    };\n\n    this.enableVideo = async () => {\n      let vid = document.getElementById(\"user-video\");\n      const constraints = {\n        audio: false,\n        video: true\n      };\n\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        window.stream = stream;\n        vid.srcObject = stream;\n        vid.play();\n      } catch (e) {}\n    };\n  }\n\n  componentDidMount() {\n    this.enableVideo();\n    this.start();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: [\"Detect Mask | \", conf.APP_NAME]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"train-images\",\n        style: {\n          'display': 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: m1,\n          className: \"mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: m2,\n          className: \"mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: m3,\n          className: \"mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: m4,\n          className: \"mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: m5,\n          className: \"mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm1,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm2,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm3,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm4,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm5,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nm6,\n          className: \"no-mask-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"test-img\",\n        crossorigin: \"anonymous\",\n        src: m1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container mainsection\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col col-12 col-lg-6\",\n              style: {\n                'display': 'grid',\n                'placeItems': 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"video\", {\n                src: \"\",\n                className: \"w-100\",\n                id: \"user-video\",\n                controls: true,\n                autoPlay: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn mainbtn mt-2\",\n                onClick: this.captureVideo,\n                children: \"Capture Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col col-12 col-lg-6 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"imgmain\",\n                children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                  id: \"canvas\",\n                  className: \"w-100\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          id: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/maskdetector/src/pages/detect/Detect.js"],"names":["React","Component","Header","Footer","Helmet","conf","tf","mobilenet","knnClassifier","m1","m2","m3","m4","m5","nm1","nm2","nm3","nm4","nm5","nm6","Detect","start","maskImageCount","noMaskImageCount","mobilenetModule","load","version","alpha","classifier","trainClassifier","testImage","document","getElementById","tfTestImage","browser","fromPixels","logits","infer","prediction","predictClass","label","classList","add","state","isCameraAccessed","create","maskImages","querySelectorAll","forEach","img","tfImg","addExample","noMaskImages","fillImage","image","canvas","ctx","getContext","src","toDataURL","captureVideo","video","console","log","width","height","drawImage","enableVideo","vid","constraints","audio","stream","navigator","mediaDevices","getUserMedia","window","srcObject","play","e","componentDidMount","render","APP_NAME"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Header from '../../comps/header/Header'\r\nimport Footer from '../../comps/footer/Footer'\r\nimport Helmet from 'react-helmet'\r\nimport conf from '../../config.json'\r\nimport './detect.css'\r\n\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport * as mobilenet from '@tensorflow-models/mobilenet'\r\nimport * as knnClassifier from '@tensorflow-models/knn-classifier'\r\n\r\n\r\nimport m1 from '../../images/mask/1.jpg'\r\nimport m2 from '../../images/mask/2.jpg'\r\nimport m3 from '../../images/mask/3.jpg'\r\nimport m4 from '../../images/mask/4.jpg'\r\nimport m5 from '../../images/mask/5.jpg'\r\n\r\nimport nm1 from '../../images/no_mask/1.jpg'\r\nimport nm2 from '../../images/no_mask/2.jpg'\r\nimport nm3 from '../../images/no_mask/3.jpg'\r\nimport nm4 from '../../images/no_mask/4.jpg'\r\nimport nm5 from '../../images/no_mask/5.jpg'\r\nimport nm6 from '../../images/no_mask/6.jpg'\r\n\r\nexport default class Detect extends Component {\r\n\r\n    componentDidMount(){\r\n        this.enableVideo()\r\n\r\n        \r\n\r\n        this.start()\r\n        \r\n    }\r\n\r\n    start = async () => {\r\n        const maskImageCount = 5;\r\n        const noMaskImageCount = 6;\r\n\r\n        // https://projects.techfacts007.in/hack/images/mask/ {5}\r\n        // https://projects.techfacts007.in/hack/images/no_mask/ {6}\r\n\r\n        // const trainImagesContainer = document.querySelector('.train-images');\r\n        // // Add mask images to the DOM and give them a class of `mask-img`\r\n        // for (let i = 1; i <= maskImageCount; i++) {\r\n        //     const newImage = document.createElement('IMG');\r\n        //     newImage.setAttribute('crossorigin', `anonymous`);\r\n        //     newImage.setAttribute('src', `https://projects.techfacts007.in/hack/images/mask/${i}.jpg`);\r\n        //     newImage.classList.add('mask-img');\r\n        //     trainImagesContainer.appendChild(newImage);\r\n        // }\r\n        // // Add no mask images to the DOM and give them a class of `no-mask-img`\r\n        // for (let i = 1; i <= noMaskImageCount; i++) {\r\n        //     const newImage = document.createElement('IMG');\r\n        //     newImage.setAttribute('crossorigin', `anonymous`);\r\n        //     newImage.setAttribute('src', `https://projects.techfacts007.in/hack/images//no_mask/${i}.jpg`);\r\n        //     newImage.classList.add('no-mask-img');\r\n        //     trainImagesContainer.appendChild(newImage);\r\n        // }\r\n\r\n        // console.log( trainImagesContainer )\r\n        return true\r\n\r\n        // Load mobilenet module\r\n        const mobilenetModule = await mobilenet.load({version: 2, alpha: 1});\r\n        // Add examples to the KNN Classifier\r\n        const classifier = await this.trainClassifier(mobilenetModule);\r\n\r\n        // Predict class for the test image\r\n        const testImage = document.getElementById('test-img');\r\n        const tfTestImage = tf.browser.fromPixels(testImage);\r\n        const logits = mobilenetModule.infer(tfTestImage, 'conv_preds');\r\n        const prediction = await classifier.predictClass(logits);\r\n\r\n        // Add a border to the test image to display the prediction result\r\n        if (prediction.label == 1) { // no mask - red border\r\n            testImage.classList.add('no-mask');\r\n        } else { // has mask - green border\r\n            testImage.classList.add('mask');\r\n        }\r\n    }\r\n\r\n    state = {\r\n        isCameraAccessed: true\r\n    }\r\n\r\n    trainClassifier = async (mobilenetModule) => {\r\n        // Create a new KNN Classifier\r\n        const classifier = knnClassifier.create();\r\n\r\n        // Train using mask images\r\n        const maskImages = document.querySelectorAll('.mask-img');\r\n        maskImages.forEach(img => {\r\n            const tfImg = tf.browser.fromPixels(img);\r\n            const logits = mobilenetModule.infer(tfImg, 'conv_preds');\r\n            classifier.addExample(logits, 0); // has mask\r\n        });\r\n        // Train using no mask images\r\n        const noMaskImages = document.querySelectorAll('.no-mask-img');\r\n        noMaskImages.forEach(img => {\r\n            const tfImg = tf.browser.fromPixels(img);\r\n            const logits = mobilenetModule.infer(tfImg, 'conv_preds');\r\n            classifier.addExample(logits, 1); // no mask\r\n        });\r\n\r\n        return classifier;\r\n    }\r\n\r\n    fillImage = () => {\r\n        let image = document.getElementById('test')\r\n        let canvas = document.getElementById('canvas')\r\n        let ctx = canvas.getContext('2d')\r\n        image.src = canvas.toDataURL(\"image/png\")\r\n    }\r\n\r\n    captureVideo = () => {\r\n        var canvas = document.getElementById('canvas');\r\n        var video = document.getElementById('user-video');\r\n        console.log( canvas.width, canvas.height)\r\n        \r\n        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n        this.fillImage()\r\n    }\r\n\r\n    enableVideo = async () => {\r\n        let vid = document.getElementById(\"user-video\")\r\n        const constraints = {\r\n            audio: false,\r\n            video: true\r\n        }\r\n        try{\r\n            const stream = await navigator.mediaDevices.getUserMedia( constraints )\r\n            window.stream = stream\r\n            vid.srcObject = stream\r\n            vid.play()\r\n        }\r\n        catch( e ){\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Helmet>\r\n                    <title>Detect Mask | {conf.APP_NAME}</title>\r\n                </Helmet>\r\n                <Header />\r\n                <div class=\"train-images\" style={{'display': 'none'}}>\r\n                    <img src={ m1 } className=\"mask-img\" />\r\n                    <img src={ m2 } className=\"mask-img\" />\r\n                    <img src={ m3 } className=\"mask-img\" />\r\n                    <img src={ m4 } className=\"mask-img\" />\r\n                    <img src={ m5 } className=\"mask-img\" />\r\n\r\n                    \r\n                    <img src={ nm1 } className=\"no-mask-img\" />\r\n                    <img src={ nm2 } className=\"no-mask-img\" />\r\n                    <img src={ nm3 } className=\"no-mask-img\" />\r\n                    <img src={ nm4 } className=\"no-mask-img\" />\r\n                    <img src={ nm5 } className=\"no-mask-img\" />\r\n                    <img src={ nm6 } className=\"no-mask-img\" />\r\n\r\n\r\n                </div>\r\n                <img id=\"test-img\" crossorigin=\"anonymous\" src={ m1 } />\r\n            <section>\r\n          <div className=\"container mainsection\">\r\n            <div className=\"row\">\r\n              <div className=\"col col-12 col-lg-6\" style={{'display': 'grid', 'placeItems': 'center'}}>\r\n                \r\n                <video src='' className=\"w-100\" id=\"user-video\" controls={ true } autoPlay={ false } />\r\n                  <button type=\"button\" className=\"btn mainbtn mt-2\" onClick={ this.captureVideo }>\r\n                    Capture Image\r\n                  </button>\r\n                  <br />\r\n              </div>\r\n\r\n              <div className=\"col col-12 col-lg-6 \">\r\n                <div className=\"imgmain\">\r\n                    <canvas id=\"canvas\" className=\"w-100\"></canvas>\r\n                  {/* <img src={Mainbg} className=\"img-fluid homecol\" id=\"user-img\" alt=\"...\" /> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <img src=\"\" id=\"test\" />\r\n        </section>\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}