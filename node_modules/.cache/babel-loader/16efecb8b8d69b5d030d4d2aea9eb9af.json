{"ast":null,"code":"var util = require('utils-extend');\n/**\n * @description\n * @example\n * `**\\/*` match all files\n * `*.js`  only match current dir files\n * '**\\/*.js' match all js files\n * 'path/*.js' match js files in path\n * '!*.js' exclude js files \n */\n\n\nfunction fileMatch(filter, ignore) {\n  if (filter === null) {\n    return function () {\n      return true;\n    };\n  } else if (filter === '' || util.isArray(filter) && !filter.length) {\n    return function () {\n      return false;\n    };\n  }\n\n  if (util.isString(filter)) {\n    filter = [filter];\n  }\n\n  var match = [];\n  var negate = [];\n  var isIgnore = ignore ? 'i' : '';\n  filter.forEach(function (item) {\n    var isNegate = item.indexOf('!') === 0;\n    item = item.replace(/^!/, '').replace(/\\*(?![\\/*])/, '[^/]*?').replace('**\\/', '([^/]+\\/)*').replace(/\\{([^\\}]+)\\}/g, function ($1, $2) {\n      var collection = $2.split(',');\n      var length = collection.length;\n      var result = '(?:';\n      collection.forEach(function (item, index) {\n        result += '(' + item.trim() + ')';\n\n        if (index + 1 !== length) {\n          result += '|';\n        }\n      });\n      result += ')';\n      return result;\n    }).replace(/([\\/\\.])/g, '\\\\$1');\n    item = '(^' + item + '$)';\n\n    if (isNegate) {\n      negate.push(item);\n    } else {\n      match.push(item);\n    }\n  });\n  match = match.length ? new RegExp(match.join('|'), isIgnore) : null;\n  negate = negate.length ? new RegExp(negate.join('|'), isIgnore) : null;\n  return function (filepath) {\n    // Normalize \\\\ paths to / paths.\n    filepath = util.path.unixifyPath(filepath);\n\n    if (negate && negate.test(filepath)) {\n      return false;\n    }\n\n    if (match && match.test(filepath)) {\n      return true;\n    }\n\n    return false;\n  };\n}\n\nmodule.exports = fileMatch;","map":{"version":3,"sources":["D:/Projects/maskdetector/node_modules/file-match/file-match.js"],"names":["util","require","fileMatch","filter","ignore","isArray","length","isString","match","negate","isIgnore","forEach","item","isNegate","indexOf","replace","$1","$2","collection","split","result","index","trim","push","RegExp","join","filepath","path","unixifyPath","test","module","exports"],"mappings":"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","sourcesContent":["var util = require('utils-extend');\n/**\n * @description\n * @example\n * `**\\/*` match all files\n * `*.js`  only match current dir files\n * '**\\/*.js' match all js files\n * 'path/*.js' match js files in path\n * '!*.js' exclude js files \n */\nfunction fileMatch(filter, ignore) {\n  if (filter === null) {\n    return function() {\n      return true;\n    };\n  } else if (filter === '' || (util.isArray(filter) && !filter.length)) {\n    return function() {\n      return false;\n    };\n  }\n\n  if (util.isString(filter)) {\n    filter = [filter];\n  }\n\n  var match = [];\n  var negate = [];\n  var isIgnore = ignore ? 'i' : '';\n\n  filter.forEach(function(item) {\n    var isNegate = item.indexOf('!') === 0;\n    item = item\n      .replace(/^!/, '')\n      .replace(/\\*(?![\\/*])/, '[^/]*?')\n      .replace('**\\/', '([^/]+\\/)*')\n      .replace(/\\{([^\\}]+)\\}/g, function($1, $2) {\n        var collection = $2.split(',');\n        var length = collection.length;\n        var result = '(?:';\n\n        collection.forEach(function(item, index) {\n          result += '(' + item.trim() + ')';\n\n          if (index + 1 !== length) {\n            result += '|';\n          }\n        });\n\n        result += ')';\n\n        return result;\n      })\n      .replace(/([\\/\\.])/g, '\\\\$1');\n\n    item = '(^' + item + '$)';\n\n    if (isNegate) {\n      negate.push(item);\n    } else {\n      match.push(item);\n    }\n  });\n\n  match = match.length ?  new RegExp(match.join('|'), isIgnore) : null;\n  negate = negate.length ? new RegExp(negate.join('|'), isIgnore) : null;\n\n  return function(filepath) {\n    // Normalize \\\\ paths to / paths.\n    filepath = util.path.unixifyPath(filepath);\n\n    if (negate && negate.test(filepath)) {\n      return false;\n    }\n\n    if (match && match.test(filepath)) {\n      return true;\n    }\n\n    return false;\n  };\n}\n\nmodule.exports = fileMatch;"]},"metadata":{},"sourceType":"script"}