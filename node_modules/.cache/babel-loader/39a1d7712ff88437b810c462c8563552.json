{"ast":null,"code":"'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar fs = require('fs');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = base64ToImage;\n/**\r\n * Change base64Str to image and write image file with \r\n   the specified file name to the specified file path.\r\n * @param {String} base64 string (mandatory)\r\n * @param {String} file path e.g. /opt/temp/uploads/ (mandatory)\r\n * @return {Object} optionsObj holds image type, image filename, debug e.g.{'fileName':fileName, 'type':type,'debug':true} (optional)\r\n * @public\r\n */\n\nfunction base64ToImage(base64Str, path, optionalObj) {\n  if (!base64Str || !path) {\n    throw new Error('Missing mandatory arguments base64 string and/or path string');\n  }\n\n  var optionalObj = optionalObj || {};\n  var imageBuffer = decodeBase64Image(base64Str);\n  var imageType = optionalObj.type || imageBuffer.type || 'png';\n  var fileName = optionalObj.fileName || 'img-' + Date.now();\n  var abs;\n  var fileName = '' + fileName;\n\n  if (fileName.indexOf('.') === -1) {\n    imageType = imageType.replace('image/', '');\n    fileName = fileName + '.' + imageType;\n  }\n\n  abs = path + fileName;\n  fs.writeFile(abs, imageBuffer.data, 'base64', function (err) {\n    if (err && optionalObj.debug) {\n      console.log(\"File image write error\", err);\n    }\n  });\n  return {\n    'imageType': imageType,\n    'fileName': fileName\n  };\n}\n\n;\n/**\r\n * Decode base64 string to buffer.\r\n *\r\n * @param {String} base64Str string\r\n * @return {Object} Image object with image type and data buffer.\r\n * @public\r\n */\n\nfunction decodeBase64Image(base64Str) {\n  var matches = base64Str.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n  var image = {};\n\n  if (!matches || matches.length !== 3) {\n    throw new Error('Invalid base64 string');\n  }\n\n  image.type = matches[1];\n  image.data = new Buffer(matches[2], 'base64');\n  return image;\n}","map":{"version":3,"sources":["D:/Projects/maskdetector/node_modules/base64-to-image/index.js"],"names":["fs","require","module","exports","base64ToImage","base64Str","path","optionalObj","Error","imageBuffer","decodeBase64Image","imageType","type","fileName","Date","now","abs","indexOf","replace","writeFile","data","err","debug","console","log","matches","match","image","length","Buffer"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,CAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqD;AAEjD,MAAI,CAACF,SAAD,IAAc,CAACC,IAAnB,EAAyB;AACrB,UAAM,IAAIE,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,MAAID,WAAW,GAAGA,WAAW,IAAI,EAAjC;AACA,MAAIE,WAAW,GAAGC,iBAAiB,CAACL,SAAD,CAAnC;AACA,MAAIM,SAAS,GAAGJ,WAAW,CAACK,IAAZ,IAAoBH,WAAW,CAACG,IAAhC,IAAwC,KAAxD;AACA,MAAIC,QAAQ,GAAGN,WAAW,CAACM,QAAZ,IAAwB,SAASC,IAAI,CAACC,GAAL,EAAhD;AACA,MAAIC,GAAJ;AACA,MAAIH,QAAQ,GAAG,KAAKA,QAApB;;AAEA,MAAIA,QAAQ,CAACI,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAC9BN,IAAAA,SAAS,GAAGA,SAAS,CAACO,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,CAAZ;AACAL,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,GAAX,GAAiBF,SAA5B;AACH;;AAEDK,EAAAA,GAAG,GAAGV,IAAI,GAAGO,QAAb;AACAb,EAAAA,EAAE,CAACmB,SAAH,CAAaH,GAAb,EAAkBP,WAAW,CAACW,IAA9B,EAAoC,QAApC,EAA8C,UAASC,GAAT,EAAc;AACxD,QAAIA,GAAG,IAAId,WAAW,CAACe,KAAvB,EAA8B;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,GAAtC;AACH;AAEJ,GALD;AAMA,SAAO;AACH,iBAAaV,SADV;AAEH,gBAAYE;AAFT,GAAP;AAIH;;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,iBAAT,CAA2BL,SAA3B,EAAsC;AAClC,MAAIoB,OAAO,GAAGpB,SAAS,CAACqB,KAAV,CAAgB,oCAAhB,CAAd;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAI,CAACF,OAAD,IAAYA,OAAO,CAACG,MAAR,KAAmB,CAAnC,EAAsC;AAClC,UAAM,IAAIpB,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAEDmB,EAAAA,KAAK,CAACf,IAAN,GAAaa,OAAO,CAAC,CAAD,CAApB;AACAE,EAAAA,KAAK,CAACP,IAAN,GAAa,IAAIS,MAAJ,CAAWJ,OAAO,CAAC,CAAD,CAAlB,EAAuB,QAAvB,CAAb;AAEA,SAAOE,KAAP;AACH","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\nvar fs = require('fs');\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\nmodule.exports = base64ToImage;\r\n\r\n/**\r\n * Change base64Str to image and write image file with \r\n   the specified file name to the specified file path.\r\n * @param {String} base64 string (mandatory)\r\n * @param {String} file path e.g. /opt/temp/uploads/ (mandatory)\r\n * @return {Object} optionsObj holds image type, image filename, debug e.g.{'fileName':fileName, 'type':type,'debug':true} (optional)\r\n * @public\r\n */\r\nfunction base64ToImage(base64Str, path, optionalObj) {\r\n\r\n    if (!base64Str || !path) {\r\n        throw new Error('Missing mandatory arguments base64 string and/or path string');\r\n    }\r\n\r\n    var optionalObj = optionalObj || {};\r\n    var imageBuffer = decodeBase64Image(base64Str);\r\n    var imageType = optionalObj.type || imageBuffer.type || 'png';\r\n    var fileName = optionalObj.fileName || 'img-' + Date.now();\r\n    var abs;\r\n    var fileName = '' + fileName;\r\n\r\n    if (fileName.indexOf('.') === -1) {\r\n        imageType = imageType.replace('image/', '');\r\n        fileName = fileName + '.' + imageType;\r\n    }\r\n\r\n    abs = path + fileName;\r\n    fs.writeFile(abs, imageBuffer.data, 'base64', function(err) {\r\n        if (err && optionalObj.debug) {\r\n            console.log(\"File image write error\", err);\r\n        }\r\n\r\n    });\r\n    return {\r\n        'imageType': imageType,\r\n        'fileName': fileName\r\n    };\r\n};\r\n\r\n/**\r\n * Decode base64 string to buffer.\r\n *\r\n * @param {String} base64Str string\r\n * @return {Object} Image object with image type and data buffer.\r\n * @public\r\n */\r\nfunction decodeBase64Image(base64Str) {\r\n    var matches = base64Str.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\r\n    var image = {};\r\n    if (!matches || matches.length !== 3) {\r\n        throw new Error('Invalid base64 string');\r\n    }\r\n\r\n    image.type = matches[1];\r\n    image.data = new Buffer(matches[2], 'base64');\r\n\r\n    return image;\r\n}"]},"metadata":{},"sourceType":"script"}