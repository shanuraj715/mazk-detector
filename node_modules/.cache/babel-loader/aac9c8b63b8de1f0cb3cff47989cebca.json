{"ast":null,"code":"/**\n * @fileoverview Http request in node.js\n * @author douzi <liaowei08@gmail.com> \n */\nvar http = require('http');\n\nvar util = require('utils-extend');\n\nvar url = require('url');\n\nvar path = require('path');\n\nvar querystring = require('querystring');\n\nvar file = require('file-system');\n/**\n * @description\n * http request\n * @param {object|string} [options]\n * @param {function} [callback]\n * @example\n * request('url', function(err, res, body) { });\n * request({url: '', headers: {}, method: 'POST'}, function(err, res, body) { });\n */\n\n\nfunction request(options, callback) {\n  var opts = {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'GET',\n    encoding: 'utf8',\n    // If the callback body is buffer, it can hanlder document pipe simply\n    isBuffer: false,\n    json: false\n  };\n\n  if (util.isString(options)) {\n    opts.url = options;\n  } else {\n    util.extend(opts, options);\n  } // Append request data\n\n\n  if (opts.data) {\n    if (opts.method === 'GET') {\n      opts.url += '?' + querystring.stringify(opts.data);\n    } else {\n      opts.data = JSON.stringify(opts.data);\n      opts.headers['Content-Length'] = new Buffer(opts.data).length;\n    }\n  } // Extend request url object\n\n\n  util.extend(opts, util.pick(url.parse(opts.url), 'hostname', 'port', 'path', 'auth'));\n  delete opts.url;\n  var req = http.request(opts, function (res) {\n    var body = [];\n    var size = 0;\n    res.on('data', function (chunk) {\n      body.push(chunk);\n      size += chunk.length;\n    });\n    res.on('end', function () {\n      var result = ''; // Buffer\n\n      if (opts.isBuffer) {\n        result = Buffer.concat(body, size);\n      } else {\n        var buffer = new Buffer(size);\n\n        for (var i = 0, pos = 0, l = body.length; i < l; i++) {\n          var chunk = body[i];\n          chunk.copy(buffer, pos);\n          pos += chunk.length;\n        }\n\n        result = buffer.toString(opts.encoding);\n\n        if (opts.json) {\n          result = JSON.parse(result);\n        }\n      }\n\n      callback(null, res, result);\n    });\n  });\n  req.on('error', callback);\n\n  if (opts.method !== 'GET' && opts.data) {\n    req.write(opts.data);\n  }\n\n  req.end();\n}\n/**\n * @description\n * @example\n * request.post('url', function() {});\n * request.post({ url: 'url', data: { q1: 'v1' }}, function() {});\n */\n\n\nrequest.post = function (options, callback) {\n  if (util.isString(options)) {\n    options = {\n      url: options\n    };\n  }\n\n  options.method = 'POST';\n  request(options, callback);\n};\n/**\n * @description\n * Download remote resurce to local file\n * @example\n * request.download({ url: 'path.png' }, function(err, res, body, filepath) {})\n * request.download({ \n    url: 'path.png',\n    rootPath: 'dest/path' \n   }, function(err, res, body, filepath) {\n    \n   });\n */\n\n\nrequest.download = function (options, callback) {\n  var opts = util.extend({\n    rootPath: '',\n    ignore: false\n  }, options);\n  request({\n    url: opts.url,\n    isBuffer: true\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(err, res, body);\n    var destPath;\n    var pathname = url.parse(options.url).pathname.replace(/^\\//, '');\n\n    if (opts.destPath) {\n      if (util.isFunction(opts.destPath)) {\n        destPath = opts.destPath(path.basename(pathname));\n      } else {\n        destPath = opts.destPath;\n      }\n    } else {\n      destPath = path.join(options.rootPath, pathname);\n    }\n\n    if (opts.ignore) {\n      destPath = destPath.toLowerCase();\n    }\n\n    file.writeFile(destPath, body, function (err) {\n      if (err) return callback(err);\n      callback(null, res, body, destPath);\n    });\n  });\n};\n\nmodule.exports = request;","map":{"version":3,"sources":["D:/Projects/maskdetector/node_modules/ajax-request/index.js"],"names":["http","require","util","url","path","querystring","file","request","options","callback","opts","headers","method","encoding","isBuffer","json","isString","extend","data","stringify","JSON","Buffer","length","pick","parse","req","res","body","size","on","chunk","push","result","concat","buffer","i","pos","l","copy","toString","write","end","post","download","rootPath","ignore","err","statusCode","destPath","pathname","replace","isFunction","basename","join","toLowerCase","writeFile","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,aAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,OAAT,CAAiBC,OAAjB,EAA0BC,QAA1B,EAAoC;AAClC,MAAIC,IAAI,GAAG;AACTC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KADA;AAITC,IAAAA,MAAM,EAAE,KAJC;AAKTC,IAAAA,QAAQ,EAAE,MALD;AAMT;AACAC,IAAAA,QAAQ,EAAE,KAPD;AAQTC,IAAAA,IAAI,EAAE;AARG,GAAX;;AAWA,MAAIb,IAAI,CAACc,QAAL,CAAcR,OAAd,CAAJ,EAA4B;AAC1BE,IAAAA,IAAI,CAACP,GAAL,GAAWK,OAAX;AACD,GAFD,MAEO;AACLN,IAAAA,IAAI,CAACe,MAAL,CAAYP,IAAZ,EAAkBF,OAAlB;AACD,GAhBiC,CAkBlC;;;AACA,MAAIE,IAAI,CAACQ,IAAT,EAAe;AACb,QAAIR,IAAI,CAACE,MAAL,KAAgB,KAApB,EAA2B;AACzBF,MAAAA,IAAI,CAACP,GAAL,IAAY,MAAME,WAAW,CAACc,SAAZ,CAAsBT,IAAI,CAACQ,IAA3B,CAAlB;AACD,KAFD,MAEO;AACLR,MAAAA,IAAI,CAACQ,IAAL,GAAYE,IAAI,CAACD,SAAL,CAAeT,IAAI,CAACQ,IAApB,CAAZ;AACAR,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiC,IAAIU,MAAJ,CAAWX,IAAI,CAACQ,IAAhB,EAAsBI,MAAvD;AACD;AACF,GA1BiC,CA4BlC;;;AACApB,EAAAA,IAAI,CAACe,MAAL,CAAYP,IAAZ,EAAkBR,IAAI,CAACqB,IAAL,CAAUpB,GAAG,CAACqB,KAAJ,CAAUd,IAAI,CAACP,GAAf,CAAV,EAA+B,UAA/B,EAA2C,MAA3C,EAAmD,MAAnD,EAA2D,MAA3D,CAAlB;AACA,SAAOO,IAAI,CAACP,GAAZ;AAEA,MAAIsB,GAAG,GAAGzB,IAAI,CAACO,OAAL,CAAaG,IAAb,EAAmB,UAASgB,GAAT,EAAc;AACzC,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,CAAX;AAEAF,IAAAA,GAAG,CAACG,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC7BH,MAAAA,IAAI,CAACI,IAAL,CAAUD,KAAV;AACAF,MAAAA,IAAI,IAAIE,KAAK,CAACR,MAAd;AACD,KAHD;AAKAI,IAAAA,GAAG,CAACG,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,UAAIG,MAAM,GAAG,EAAb,CADuB,CAGvB;;AACA,UAAItB,IAAI,CAACI,QAAT,EAAmB;AACjBkB,QAAAA,MAAM,GAAIX,MAAM,CAACY,MAAP,CAAcN,IAAd,EAAoBC,IAApB,CAAV;AACD,OAFD,MAEO;AACL,YAAIM,MAAM,GAAG,IAAIb,MAAJ,CAAWO,IAAX,CAAb;;AACA,aAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,CAAjB,EAAoBC,CAAC,GAAGV,IAAI,CAACL,MAAlC,EAA0Ca,CAAC,GAAGE,CAA9C,EAAiDF,CAAC,EAAlD,EAAsD;AACpD,cAAIL,KAAK,GAAGH,IAAI,CAACQ,CAAD,CAAhB;AACAL,UAAAA,KAAK,CAACQ,IAAN,CAAWJ,MAAX,EAAmBE,GAAnB;AACAA,UAAAA,GAAG,IAAIN,KAAK,CAACR,MAAb;AACD;;AACDU,QAAAA,MAAM,GAAGE,MAAM,CAACK,QAAP,CAAgB7B,IAAI,CAACG,QAArB,CAAT;;AAEA,YAAIH,IAAI,CAACK,IAAT,EAAe;AACbiB,UAAAA,MAAM,GAAGZ,IAAI,CAACI,KAAL,CAAWQ,MAAX,CAAT;AACD;AACF;;AAEDvB,MAAAA,QAAQ,CAAC,IAAD,EAAOiB,GAAP,EAAYM,MAAZ,CAAR;AACD,KArBD;AAsBD,GA/BS,CAAV;AAiCAP,EAAAA,GAAG,CAACI,EAAJ,CAAO,OAAP,EAAgBpB,QAAhB;;AAEA,MAAIC,IAAI,CAACE,MAAL,KAAgB,KAAhB,IAAyBF,IAAI,CAACQ,IAAlC,EAAwC;AACtCO,IAAAA,GAAG,CAACe,KAAJ,CAAU9B,IAAI,CAACQ,IAAf;AACD;;AAEDO,EAAAA,GAAG,CAACgB,GAAJ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAlC,OAAO,CAACmC,IAAR,GAAe,UAASlC,OAAT,EAAkBC,QAAlB,EAA4B;AACzC,MAAIP,IAAI,CAACc,QAAL,CAAcR,OAAd,CAAJ,EAA4B;AAC1BA,IAAAA,OAAO,GAAG;AACRL,MAAAA,GAAG,EAAEK;AADG,KAAV;AAGD;;AAEDA,EAAAA,OAAO,CAACI,MAAR,GAAiB,MAAjB;AACAL,EAAAA,OAAO,CAACC,OAAD,EAAUC,QAAV,CAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACoC,QAAR,GAAmB,UAASnC,OAAT,EAAkBC,QAAlB,EAA4B;AAC7C,MAAIC,IAAI,GAAGR,IAAI,CAACe,MAAL,CAAY;AACrB2B,IAAAA,QAAQ,EAAE,EADW;AAErBC,IAAAA,MAAM,EAAE;AAFa,GAAZ,EAGRrC,OAHQ,CAAX;AAKAD,EAAAA,OAAO,CAAC;AACNJ,IAAAA,GAAG,EAAEO,IAAI,CAACP,GADJ;AAENW,IAAAA,QAAQ,EAAE;AAFJ,GAAD,EAGJ,UAASgC,GAAT,EAAcpB,GAAd,EAAmBC,IAAnB,EAAyB;AAC1B,QAAImB,GAAJ,EAAS,OAAOrC,QAAQ,CAACqC,GAAD,CAAf;AACT,QAAIpB,GAAG,CAACqB,UAAJ,KAAmB,GAAvB,EAA4B,OAAOtC,QAAQ,CAACqC,GAAD,EAAMpB,GAAN,EAAWC,IAAX,CAAf;AAC5B,QAAIqB,QAAJ;AACA,QAAIC,QAAQ,GAAG9C,GAAG,CAACqB,KAAJ,CAAUhB,OAAO,CAACL,GAAlB,EAAuB8C,QAAvB,CAAgCC,OAAhC,CAAwC,KAAxC,EAA+C,EAA/C,CAAf;;AAEA,QAAIxC,IAAI,CAACsC,QAAT,EAAmB;AACjB,UAAI9C,IAAI,CAACiD,UAAL,CAAgBzC,IAAI,CAACsC,QAArB,CAAJ,EAAoC;AAClCA,QAAAA,QAAQ,GAAGtC,IAAI,CAACsC,QAAL,CAAc5C,IAAI,CAACgD,QAAL,CAAcH,QAAd,CAAd,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,QAAQ,GAAGtC,IAAI,CAACsC,QAAhB;AACD;AACF,KAND,MAMO;AACLA,MAAAA,QAAQ,GAAG5C,IAAI,CAACiD,IAAL,CACT7C,OAAO,CAACoC,QADC,EAETK,QAFS,CAAX;AAID;;AAED,QAAIvC,IAAI,CAACmC,MAAT,EAAiB;AACfG,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,WAAT,EAAX;AACD;;AAEDhD,IAAAA,IAAI,CAACiD,SAAL,CAAeP,QAAf,EAAyBrB,IAAzB,EAA+B,UAASmB,GAAT,EAAc;AAC3C,UAAIA,GAAJ,EAAS,OAAOrC,QAAQ,CAACqC,GAAD,CAAf;AAETrC,MAAAA,QAAQ,CAAC,IAAD,EAAOiB,GAAP,EAAYC,IAAZ,EAAkBqB,QAAlB,CAAR;AACD,KAJD;AAKD,GA/BM,CAAP;AAgCD,CAtCD;;AAwCAQ,MAAM,CAACC,OAAP,GAAiBlD,OAAjB","sourcesContent":["/**\n * @fileoverview Http request in node.js\n * @author douzi <liaowei08@gmail.com> \n */\nvar http = require('http');\nvar util = require('utils-extend');\nvar url = require('url');\nvar path = require('path');\nvar querystring = require('querystring');\nvar file = require('file-system');\n\n/**\n * @description\n * http request\n * @param {object|string} [options]\n * @param {function} [callback]\n * @example\n * request('url', function(err, res, body) { });\n * request({url: '', headers: {}, method: 'POST'}, function(err, res, body) { });\n */\nfunction request(options, callback) {\n  var opts = {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'GET',\n    encoding: 'utf8',\n    // If the callback body is buffer, it can hanlder document pipe simply\n    isBuffer: false,\n    json: false\n  };\n\n  if (util.isString(options)) {\n    opts.url = options;\n  } else {\n    util.extend(opts, options);\n  }\n\n  // Append request data\n  if (opts.data) {\n    if (opts.method === 'GET') {\n      opts.url += '?' + querystring.stringify(opts.data);\n    } else {\n      opts.data = JSON.stringify(opts.data);\n      opts.headers['Content-Length'] = new Buffer(opts.data).length;\n    }\n  }\n\n  // Extend request url object\n  util.extend(opts, util.pick(url.parse(opts.url), 'hostname', 'port', 'path', 'auth'));\n  delete opts.url;\n\n  var req = http.request(opts, function(res) {\n    var body = [];\n    var size = 0;\n\n    res.on('data', function(chunk) {\n      body.push(chunk);\n      size += chunk.length;\n    });\n\n    res.on('end', function() {\n      var result = '';\n\n      // Buffer\n      if (opts.isBuffer) {\n        result =  Buffer.concat(body, size);\n      } else {\n        var buffer = new Buffer(size);\n        for (var i = 0, pos = 0, l = body.length; i < l; i++) {\n          var chunk = body[i];\n          chunk.copy(buffer, pos);\n          pos += chunk.length;\n        }\n        result = buffer.toString(opts.encoding);\n\n        if (opts.json) {\n          result = JSON.parse(result);\n        }\n      }\n\n      callback(null, res, result);\n    });\n  });\n\n  req.on('error', callback);\n\n  if (opts.method !== 'GET' && opts.data) {\n    req.write(opts.data);\n  }\n\n  req.end();\n}\n\n/**\n * @description\n * @example\n * request.post('url', function() {});\n * request.post({ url: 'url', data: { q1: 'v1' }}, function() {});\n */\nrequest.post = function(options, callback) {\n  if (util.isString(options)) {\n    options = {\n      url: options\n    };\n  }\n\n  options.method = 'POST';\n  request(options, callback);\n};\n\n/**\n * @description\n * Download remote resurce to local file\n * @example\n * request.download({ url: 'path.png' }, function(err, res, body, filepath) {})\n * request.download({ \n    url: 'path.png',\n    rootPath: 'dest/path' \n   }, function(err, res, body, filepath) {\n    \n   });\n */\nrequest.download = function(options, callback) {\n  var opts = util.extend({\n    rootPath: '',\n    ignore: false\n  }, options);\n\n  request({\n    url: opts.url,\n    isBuffer: true\n  }, function(err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(err, res, body);\n    var destPath;\n    var pathname = url.parse(options.url).pathname.replace(/^\\//, '');\n\n    if (opts.destPath) {\n      if (util.isFunction(opts.destPath)) {\n        destPath = opts.destPath(path.basename(pathname));\n      } else {\n        destPath = opts.destPath;\n      }\n    } else {\n      destPath = path.join(\n        options.rootPath,\n        pathname\n      );\n    }\n\n    if (opts.ignore) {\n      destPath = destPath.toLowerCase();\n    }\n\n    file.writeFile(destPath, body, function(err) {\n      if (err) return callback(err);\n\n      callback(null, res, body, destPath);\n    });\n  });\n};\n\nmodule.exports = request;\n"]},"metadata":{},"sourceType":"script"}