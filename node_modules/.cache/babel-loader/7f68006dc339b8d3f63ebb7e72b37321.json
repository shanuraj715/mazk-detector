{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n  constructor(imageShape, fillValue) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    let fillSnippet = '';\n\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n  getCustomSetupFunc(centerX, centerY, sinFactor, cosFactor) {\n    return (gpgpu, webGLProgram) => {\n      if (this.paramsLoc == null) {\n        this.paramsLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n      }\n\n      gpgpu.gl.uniform4f(this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n    };\n  }\n\n}","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CACI,UADJ,EAEI,SAFJ,EAE8C;AAN9C,SAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAME,UAAM,WAAW,GAAG,UAAU,CAAC,CAAD,CAA9B;AACA,UAAM,UAAU,GAAG,UAAU,CAAC,CAAD,CAA7B;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA,QAAI,WAAW,GAAG,EAAlB;;AACA,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,MAAA,WAAW,GAAG,uBAAuB,SAAS,CAAC,OAAV,CAAkB,CAAlB,CAAoB,GAAzD;AACD,KAFD,MAEO;AACL,MAAA,WAAW,GAAG;2BACO,SAAS,CAAC,IAAV,CAAe,GAAf,CAAmB;AACD,6CAFvC;AAGD;;AAED,SAAK,QAAL,GAAgB;;;;;;;;;;;;YAYR,WAAW;uCACgB,UAAU,+BACzC,WAAW;;;;;AAKd,KAnBD;AAoBD;;AAED,EAAA,kBAAkB,CACd,OADc,EACG,OADH,EACoB,SADpB,EACuC,SADvC,EACwD;AACxE,WAAO,CAAC,KAAD,EAAsB,YAAtB,KAAoD;AACzD,UAAI,KAAK,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,aAAK,SAAL,GACI,KAAK,CAAC,yBAAN,CAAgC,YAAhC,EAA8C,QAA9C,CADJ;AAED;;AACD,MAAA,KAAK,CAAC,EAAN,CAAS,SAAT,CACI,KAAK,SADT,EACoB,OADpB,EAC6B,OAD7B,EACsC,SADtC,EACiD,SADjD;AAED,KAPD;AAQD;;AArDuB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  paramsLoc: WebGLUniformLocation;\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n  getCustomSetupFunc(\n      centerX: number, centerY: number, sinFactor: number, cosFactor: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.paramsLoc == null) {\n        this.paramsLoc =\n            gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n      }\n      gpgpu.gl.uniform4f(\n          this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}