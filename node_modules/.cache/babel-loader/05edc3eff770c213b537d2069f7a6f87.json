{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class DepthwiseConvPacked2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xC${c};`;\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xC${c} = vec4(0.0);`;\n      }\n\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n        const colIndex = texelC * 2;\n        const c = colIndex * dilationWidth;\n        mainLoop += `\n          xC = xCCorner + ${c};\n          `;\n\n        if (strideWidth === 1) {\n          if (colIndex < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n              `; // This texel has been read in previous iteration if the dilation\n              // is 1.\n\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${colIndex} = vec4(xTexelC${c - 2}.zw, xTexelC${c}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${c}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${c}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${c};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n              const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n\n              if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c + 2}Ready == 0) {\n                    xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${c + 2}.zw = vec2(0.0);\n                    }\n                    xTexelC${c + 2}Ready = 1;\n                  }\n                  `; // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c}Ready == 0) {\n                      xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${c}Ready = 1;\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.xy);\n                  `;\n              } else {\n                // If dilation is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${colIndex + 1} = xTexelC${c};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c + 2}Ready == 0) {\n                      xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${c + 2}.zw = vec2(0.0);\n                      }\n                      xTexelC${c + 2}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${c + 2};\n                    `;\n                }\n              }\n            }\n          }\n        } else {\n          // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n            // even, xC${colIndex +1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.0);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${c}.xy, xTexelC${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n                `;\n              }\n            }\n          }\n        } // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n\n\n        if (colIndex < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/conv_packed_gpu_depthwise.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xC${c} = vec4(0.0);`;\n      }\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n        const colIndex = texelC * 2;\n        const c = colIndex * dilationWidth;\n\n        mainLoop += `\n          xC = xCCorner + ${c};\n          `;\n\n        if (strideWidth === 1) {\n          if (colIndex < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n              `;\n              // This texel has been read in previous iteration if the dilation\n              // is 1.\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${colIndex} = vec4(xTexelC${c - 2}.zw, xTexelC${c}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${c}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${c}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${c};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                    c + 2}Ready == 0) {\n                    xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${c + 2}.zw = vec2(0.0);\n                    }\n                    xTexelC${c + 2}Ready = 1;\n                  }\n                  `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      c}Ready == 0) {\n                      xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${c}Ready = 1;\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.xy);\n                  `;\n              } else {\n                // If dilation is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${colIndex + 1} = xTexelC${c};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      c + 2}Ready == 0) {\n                      xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${c + 2}.zw = vec2(0.0);\n                      }\n                      xTexelC${c + 2}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${c + 2};\n                    `;\n                }\n              }\n            }\n          }\n        } else {  // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n            // even, xC${colIndex +1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${\n                  c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.0);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${c}.xy, xTexelC${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n                `;\n              }\n            }\n          }\n        }\n\n        // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n        if (colIndex < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}