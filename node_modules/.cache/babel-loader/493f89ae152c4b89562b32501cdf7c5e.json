{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\maskdetector\\\\src\\\\pages\\\\detect\\\\Detect.js\";\nimport React, { Component } from 'react';\nimport Header from '../../comps/header/Header';\nimport Footer from '../../comps/footer/Footer';\nimport Helmet from 'react-helmet';\nimport conf from '../../config.json';\nimport './detect.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Detect extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = async () => {\n      const maskImageCount = 5;\n      const noMaskImageCount = 6;\n      const trainImagesContainer = document.querySelector('.train-images'); // Add mask images to the DOM and give them a class of `mask-img`\n\n      for (let i = 1; i <= maskImageCount; i++) {\n        const newImage = document.createElement('IMG');\n        newImage.setAttribute('crossorigin', `anonymous`);\n        newImage.setAttribute('src', `images/mask/${i}.jpg`);\n        newImage.classList.add('mask-img');\n        trainImagesContainer.appendChild(newImage);\n      } // Add no mask images to the DOM and give them a class of `no-mask-img`\n\n\n      for (let i = 1; i <= noMaskImageCount; i++) {\n        const newImage = document.createElement('IMG');\n        newImage.setAttribute('crossorigin', `anonymous`);\n        newImage.setAttribute('src', `images/no_mask/${i}.jpg`);\n        newImage.classList.add('no-mask-img');\n        trainImagesContainer.appendChild(newImage);\n      } // Load mobilenet module\n\n\n      const mobilenetModule = await mobilenet.load({\n        version: 2,\n        alpha: 1\n      }); // Add examples to the KNN Classifier\n\n      const classifier = await trainClassifier(mobilenetModule); // Predict class for the test image\n\n      const testImage = document.getElementById('test-img');\n      const tfTestImage = tf.browser.fromPixels(testImage);\n      const logits = mobilenetModule.infer(tfTestImage, 'conv_preds');\n      const prediction = await classifier.predictClass(logits); // Add a border to the test image to display the prediction result\n\n      if (prediction.label == 1) {\n        // no mask - red border\n        testImage.classList.add('no-mask');\n      } else {\n        // has mask - green border\n        testImage.classList.add('mask');\n      }\n    };\n\n    this.state = {\n      isCameraAccessed: true\n    };\n\n    this.fillImage = () => {\n      let image = document.getElementById('test');\n      let canvas = document.getElementById('canvas');\n      let ctx = canvas.getContext('2d');\n      image.src = canvas.toDataURL(\"image/png\");\n    };\n\n    this.captureVideo = () => {\n      var canvas = document.getElementById('canvas');\n      var video = document.getElementById('user-video');\n      console.log(canvas.width, canvas.height);\n      canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n      this.fillImage();\n    };\n\n    this.enableVideo = async () => {\n      let vid = document.getElementById(\"user-video\");\n      const constraints = {\n        audio: false,\n        video: true\n      };\n\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        window.stream = stream;\n        vid.srcObject = stream;\n        vid.play();\n      } catch (e) {}\n    };\n  }\n\n  componentDidMount() {\n    this.enableVideo();\n    this.start();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: [\"Detect Mask | \", conf.APP_NAME]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container mainsection\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col col-12 col-lg-6\",\n              style: {\n                'display': 'grid',\n                'placeItems': 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"video\", {\n                src: \"\",\n                className: \"w-100\",\n                id: \"user-video\",\n                controls: true,\n                autoPlay: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn mainbtn mt-2\",\n                onClick: this.captureVideo,\n                children: \"Capture Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col col-12 col-lg-6 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"imgmain\",\n                children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                  id: \"canvas\",\n                  className: \"w-100\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"\",\n          id: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/maskdetector/src/pages/detect/Detect.js"],"names":["React","Component","Header","Footer","Helmet","conf","Detect","start","maskImageCount","noMaskImageCount","trainImagesContainer","document","querySelector","i","newImage","createElement","setAttribute","classList","add","appendChild","mobilenetModule","mobilenet","load","version","alpha","classifier","trainClassifier","testImage","getElementById","tfTestImage","tf","browser","fromPixels","logits","infer","prediction","predictClass","label","state","isCameraAccessed","fillImage","image","canvas","ctx","getContext","src","toDataURL","captureVideo","video","console","log","width","height","drawImage","enableVideo","vid","constraints","audio","stream","navigator","mediaDevices","getUserMedia","window","srcObject","play","e","componentDidMount","render","APP_NAME"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Header from '../../comps/header/Header'\r\nimport Footer from '../../comps/footer/Footer'\r\nimport Helmet from 'react-helmet'\r\nimport conf from '../../config.json'\r\nimport './detect.css'\r\n\r\nexport default class Detect extends Component {\r\n\r\n    componentDidMount(){\r\n        this.enableVideo()\r\n\r\n        \r\n\r\n        this.start()\r\n        \r\n    }\r\n\r\n    start = async () => {\r\n        const maskImageCount = 5;\r\n    const noMaskImageCount = 6;\r\n\r\n    const trainImagesContainer = document.querySelector('.train-images');\r\n    // Add mask images to the DOM and give them a class of `mask-img`\r\n    for (let i = 1; i <= maskImageCount; i++) {\r\n        const newImage = document.createElement('IMG');\r\n        newImage.setAttribute('crossorigin', `anonymous`);\r\n        newImage.setAttribute('src', `images/mask/${i}.jpg`);\r\n        newImage.classList.add('mask-img');\r\n        trainImagesContainer.appendChild(newImage);\r\n    }\r\n    // Add no mask images to the DOM and give them a class of `no-mask-img`\r\n    for (let i = 1; i <= noMaskImageCount; i++) {\r\n        const newImage = document.createElement('IMG');\r\n        newImage.setAttribute('crossorigin', `anonymous`);\r\n        newImage.setAttribute('src', `images/no_mask/${i}.jpg`);\r\n        newImage.classList.add('no-mask-img');\r\n        trainImagesContainer.appendChild(newImage);\r\n    }\r\n\r\n    // Load mobilenet module\r\n    const mobilenetModule = await mobilenet.load({version: 2, alpha: 1});\r\n    // Add examples to the KNN Classifier\r\n    const classifier = await trainClassifier(mobilenetModule);\r\n\r\n    // Predict class for the test image\r\n    const testImage = document.getElementById('test-img');\r\n    const tfTestImage = tf.browser.fromPixels(testImage);\r\n    const logits = mobilenetModule.infer(tfTestImage, 'conv_preds');\r\n    const prediction = await classifier.predictClass(logits);\r\n\r\n    // Add a border to the test image to display the prediction result\r\n    if (prediction.label == 1) { // no mask - red border\r\n        testImage.classList.add('no-mask');\r\n    } else { // has mask - green border\r\n        testImage.classList.add('mask');\r\n    }\r\n    }\r\n\r\n    state = {\r\n        isCameraAccessed: true\r\n    }\r\n\r\n    fillImage = () => {\r\n        let image = document.getElementById('test')\r\n        let canvas = document.getElementById('canvas')\r\n        let ctx = canvas.getContext('2d')\r\n        image.src = canvas.toDataURL(\"image/png\")\r\n    }\r\n\r\n    captureVideo = () => {\r\n        var canvas = document.getElementById('canvas');\r\n        var video = document.getElementById('user-video');\r\n        console.log( canvas.width, canvas.height)\r\n        \r\n        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n        this.fillImage()\r\n    }\r\n\r\n    enableVideo = async () => {\r\n        let vid = document.getElementById(\"user-video\")\r\n        const constraints = {\r\n            audio: false,\r\n            video: true\r\n        }\r\n        try{\r\n            const stream = await navigator.mediaDevices.getUserMedia( constraints )\r\n            window.stream = stream\r\n            vid.srcObject = stream\r\n            vid.play()\r\n        }\r\n        catch( e ){\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Helmet>\r\n                    <title>Detect Mask | {conf.APP_NAME}</title>\r\n                </Helmet>\r\n                <Header />\r\n                \r\n            <section>\r\n          <div className=\"container mainsection\">\r\n            <div className=\"row\">\r\n              <div className=\"col col-12 col-lg-6\" style={{'display': 'grid', 'placeItems': 'center'}}>\r\n                \r\n                <video src='' className=\"w-100\" id=\"user-video\" controls={ true } autoPlay={ false } />\r\n                  <button type=\"button\" className=\"btn mainbtn mt-2\" onClick={ this.captureVideo }>\r\n                    Capture Image\r\n                  </button>\r\n                  <br />\r\n              </div>\r\n\r\n              <div className=\"col col-12 col-lg-6 \">\r\n                <div className=\"imgmain\">\r\n                    <canvas id=\"canvas\" className=\"w-100\"></canvas>\r\n                  {/* <img src={Mainbg} className=\"img-fluid homecol\" id=\"user-img\" alt=\"...\" /> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <img src=\"\" id=\"test\" />\r\n        </section>\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}